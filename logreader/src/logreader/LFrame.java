/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LFrame.java
 *
 * Created on 2011.03.23., 18:07:13
 */
package logreader;

import logreader.xml.ReadColumnXMLFile;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.print.Printable;
import java.awt.print.PrinterJob;
import java.io.File;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.standard.MediaPrintableArea;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author gabeszakem
 */
public class LFrame extends javax.swing.JFrame {

    /** Creates new form LFrame */
    public LFrame(String home) {
        userDir = home;
        System.out.println("userDir: " + userDir);
        initComponents();
        myInitComponents();

    }

    public LFrame() {
        userDir = System.getProperty("user.dir");
        initComponents();
        myInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneTable = new javax.swing.JScrollPane();
        modelInit();
        table = new javax.swing.JTable(model){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        paneTree = new javax.swing.JScrollPane();
        filePath = userDir
        + System.getProperty("file.separator") + "logs"
        + System.getProperty("file.separator");
        dir=new File(filePath);
        //rootNode = new DefaultMutableTreeNode(addNodes(null, dir));
        rootNode=addNodes(null, dir);
        //rootNode = new DefaultMutableTreeNode(filePath);
        treeModel = new DefaultTreeModel(rootNode);
        treeModel.reload();
        //tree = new javax.swing.JTree(addNodes(null, dir));
        //tree = new javax.swing.JTree();
        tree = new javax.swing.JTree(treeModel);
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filterText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        statusText = new javax.swing.JTextField();
        paneTreeButton = new javax.swing.JButton();
        prevButton = new javax.swing.plaf.basic.BasicArrowButton(javax.swing.plaf.basic.BasicArrowButton.WEST);
        nextButton = new javax.swing.plaf.basic.BasicArrowButton(javax.swing.plaf.basic.BasicArrowButton.EAST);
        setFilterButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LogViewer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Lucida Calligraphy", 0, 10)); // NOI18N
        setIconImage(Toolkit.getDefaultToolkit().getImage(LFrame.class.getResource("images/log-icon16.png")));
        setName("LogViewer"); // NOI18N
        setResizable(false);

        paneTable.setBackground(new java.awt.Color(255, 255, 255));
        paneTable.setOpaque(false);

        table.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    setTableListSelectionListener(event);
                }
            }
        );
        table.setForeground(new java.awt.Color(51, 51, 51));
        table.setCellSelectionEnabled(true);
        table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        sorter = new TableRowSorter<TableModel>(model);
        table.setRowSorter(sorter);
        table.setEnabled(true);
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setRowSelectionAllowed(true);
        table.setColumnSelectionAllowed(true);
        JTableHeader header = table.getTableHeader();
        //header.setBackground(Color.yellow);
        //header.setForeground(Color.BLACK);
        table.setGridColor(new java.awt.Color(117, 117, 241));
        table.setOpaque(false);
        table.setSelectionBackground(new java.awt.Color(152, 152, 159));
        table.setSelectionForeground(new java.awt.Color(0, 0, 0));
        mouseListener = new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                //System.out.println("Table - Mouse clicked!");
            }
            public void mouseEntered(MouseEvent e) {
                //System.out.println("Table - Mouse entered!");
            }
            public void mouseExited(MouseEvent e) {
                //System.out.println("Table - Mouse exited!");
            }
            public void mousePressed(MouseEvent e) {
                //System.out.println("Table - Mouse pressed!");
            }
            public void mouseReleased(MouseEvent e) {
                //System.out.println("Tray Icon - Mouse released!");
            }
        };
        table.addMouseListener(mouseListener);
        paneTable.setViewportView(table);
        popupMenu = new JPopupMenu();
        popupMenu();
        table.setComponentPopupMenu(popupMenu);

        //tree.setModel(treeModel);
        //tree.getSelectionModel().setSelectionMode(
            //        TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                treeSelectionListener(e);
            }
        });
        tree.setRootVisible(false);
        //tree.setVisible(true);
        paneTree.setViewportView(tree);

        jLabel1.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Filter expression");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        filterText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterTextActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(" Status");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        statusText.setBackground(new java.awt.Color(240, 240, 240));
        statusText.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        statusText.setForeground(new java.awt.Color(255, 51, 51));
        statusText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        statusText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        statusText.setEnabled(false);

        paneTreeButton.setText("hide");
        paneTreeButton.setMaximumSize(new java.awt.Dimension(57, 23));
        paneTreeButton.setMinimumSize(new java.awt.Dimension(57, 23));
        paneTreeButton.setPreferredSize(new java.awt.Dimension(57, 23));
        paneTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paneTreeButtonActionPerformed(evt);
            }
        });

        prevButton.setText("<-");
        prevButton.setEnabled(false);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("->");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        setFilterButton.setText("Set Filter");
        setFilterButton.setActionCommand("SetFilter");
        setFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFilterButtonActionPerformed(evt);
            }
        });

        jProgressBar1.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(paneTreeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterText, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(statusText, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(setFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paneTreeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prevButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statusText, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
        );

        filterText.addKeyListener(new MyKeyListener());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(paneTree, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paneTree, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addComponent(paneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //setIconImage(/*Toolkit.getDefaultToolkit().getImage("images/log-icon16.png")*/);
    private void filterTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTextActionPerformed
    }//GEN-LAST:event_filterTextActionPerformed

    private void setFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFilterButtonActionPerformed
        String expr = filterText.getText();
        //?i nem tesz különbséget kis és nagybetű között
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + expr));
        sorter.setSortKeys(null);
    }//GEN-LAST:event_setFilterButtonActionPerformed

    private void paneTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paneTreeButtonActionPerformed

        if (paneTree.isVisible()) {
            paneTree.setVisible(false);
            paneTreeButton.setText("show");
        } else {
            paneTree.setVisible(true);
            updateTree();
            paneTreeButton.setText("hide");
        }
    }//GEN-LAST:event_paneTreeButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        pageNumber -= 1;
        status("Prev Button pressed");
        table.clearSelection();
        try {
            if (getCursor().getType() == Cursor.DEFAULT_CURSOR) {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                String csvPath = LoadFile.getLastPath();
                if (!csvPath.equals("")) {
                    //status("open :" + csvPath + " --page " + pageNumber);
                    String[] fileName = {"csv"};
                    String tmpPath = userDir
                            + System.getProperty("file.separator") + "temp";
                    PrimeRun p = new PrimeRun(fileName, "", csvPath, tmpPath, "");
                    thread = new Thread(p);
                    thread.start();
                    //setState(javax.swing.JFrame.ICONIFIED);
                    //setState(javax.swing.JFrame.NORMAL);
                }
                setCursor(Cursor.getDefaultCursor());
                status(csvPath + " --page " + pageNumber);
            }
        } catch (Exception Ex) {
            System.err.println(Ex);
        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        pageNumber += 1;
        status("Next Button pressed");
        table.clearSelection();
        try {
            if (getCursor().getType() == Cursor.DEFAULT_CURSOR) {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                String csvPath = LoadFile.getLastPath();
                if (!csvPath.equals("")) {
                    //status("open :" + csvPath + " --page " + pageNumber);
                    String[] fileName = {"csv"};
                    String tmpPath = userDir
                            + System.getProperty("file.separator") + "temp";
                    PrimeRun p = new PrimeRun(fileName, "", csvPath, tmpPath, "");
                    thread = new Thread(p);
                    thread.start();
                    //setState(javax.swing.JFrame.ICONIFIED);
                    //setState(javax.swing.JFrame.NORMAL);
                }
                setCursor(Cursor.getDefaultCursor());
                status(csvPath + " --page " + pageNumber);
            }
        } catch (Exception Ex) {
            System.err.println(Ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new LFrame().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filterText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton nextButton;
    private javax.swing.JScrollPane paneTable;
    private javax.swing.JScrollPane paneTree;
    private javax.swing.JButton paneTreeButton;
    private javax.swing.JButton prevButton;
    private int pageNumber;
    private javax.swing.JButton setFilterButton;
    private javax.swing.JTextField statusText;
    protected DefaultTableModel model;
    protected javax.swing.JTable table;
    private TableRowSorter<TableModel> sorter;
    private JPopupMenu popupMenu;
    private MouseListener mouseListener;
    private Clipboard system;
    private StringSelection stsel;
    protected javax.swing.JTree tree;
    private String filePath;
    private String userDir;
    private File dir;
    protected DefaultMutableTreeNode rootNode;
    protected DefaultTreeModel treeModel;
    // End of variables declaration//GEN-END:variables
    private static Thread thread;
    private static Thread thread2;
    private static Thread thread3;
    private static boolean excelThreadisRunning = false;

    private void myInitComponents() {

        table.removeColumn(table.getColumn("bground"));
        table.removeColumn(table.getColumn("fground"));
        table.removeColumn(table.getColumn("tooltipcolumn"));
        table.removeColumn(table.getColumn("tooltiptext"));

        MyTableCellRender mtcr = new MyTableCellRender();
        //mtcr.setForegoundColor(table.getForeground());
        //mtcr.setBackgoundColor(table.getBackground());
        //mtcr.setCoulmNames(table);
        //mtcr.setGridColor(table.getGridColor());
        //mtcr.setSelectionForeGround(table.getSelectionForeground());
        //mtcr.setSelectionBackGround(table.getSelectionBackground());
        //mtcr.setEnableToolTipText(true);
        Vector columnNames = new Vector();
        System.out.println("columncount :" + table.getColumnCount());
        for (int i = 0; i < table.getColumnCount(); i++) {
            columnNames.add(i, table.getColumnName(i));

        }
        //mtcr.setColumnNamesArray(columnNames);
        table.setDefaultRenderer(Object.class, mtcr);
    }

    private void modelInit() {
        String separator = System.getProperty("file.separator");
        String pathDir = System.getProperty("user.dir") + separator + "logreaderxml";
        String path = pathDir + separator + "columns.xml";
        ReadColumnXMLFile cxml=new  ReadColumnXMLFile(path);
        String[] columnNames = cxml.getItemsString();
        Object[][] data = {};
        model = new DefaultTableModel(data, columnNames);
        data = null;
        columnNames = null;
    }

    private void setTableListSelectionListener(ListSelectionEvent event) {
        selectedArray();
    }

    private void treeSelectionListener(TreeSelectionEvent e) {
        try {
            if (paneTreeButton.getText().equals("hide")) {
                if (getCursor().getType() != Cursor.DEFAULT_CURSOR) {
                    try {
                        if (thread.isAlive()) {
                            thread.interrupt();
                        }
                    } catch (Exception Ex) {
                        Ex.printStackTrace();
                    }
                    try {
                        if (thread2.isAlive()) {
                            thread2.interrupt();
                        }
                    } catch (Exception Ex) {
                        Ex.printStackTrace();
                    }
                    if (!thread.isAlive()) {
                        if (!thread2.isAlive()) {
                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        }
                    }
                }


                if (getCursor().getType() == Cursor.DEFAULT_CURSOR) {
                    //setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    String tmpPath = userDir
                            + System.getProperty("file.separator") + "temp";
                    DeleteDir.removeDirectory(tmpPath);
                    String selectedPath = userDir
                            + System.getProperty("file.separator") + "logs";
                    for (int i = 1; i < e.getPath().getPathCount(); i++) {
                        selectedPath += System.getProperty("file.separator")
                                + e.getPath().getPathComponent(i).toString();
                    }
                    //System.out.println("selectedPath " + selectedPath);
                    status(selectedPath);
                    String[] fileName = e.getPath().getLastPathComponent().toString().split("\\.");
                    String csvPath = "";
                    if (fileName[fileName.length - 1].equals("csv") || fileName[fileName.length - 1].equals("zip")) {
                        pageNumber = 1;
                        PrimeRun p = new PrimeRun(fileName, csvPath, selectedPath, tmpPath, filterText.getText());
                        thread = new Thread(p);
                        thread.start();
                    }
                }
            }
        } catch (Exception Ex) {
            System.err.println(Ex);
        }

    }

    private void menuItemActionEvent(java.awt.event.ActionEvent e) {
        //System.out.println("menuItemActionEvent: " + e.getActionCommand());
        system = Toolkit.getDefaultToolkit().getSystemClipboard();
        try {
            if (e.getActionCommand().compareTo("copy") == 0) {
                copy();
            }
            if (e.getActionCommand().compareTo("select all") == 0) {
                //System.out.println("select all");
                table.selectAll();
                selectedArray();
            }
            if (e.getActionCommand().compareTo("print") == 0) {
                System.out.println("print");
                try {
                    print();
                    //MessageFormat headerFormat = new MessageFormat("CRM - Page {0}");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Print error",
                            "Print error: ex" + ex,
                            JOptionPane.ERROR_MESSAGE);
                }
            }
            if (e.getActionCommand().compareTo("export to excel") == 0) {
                System.out.println("export to excel");
                try {
                    excel();
                } catch (Exception Ex) {
                    Ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Excel error",
                            "Excel error: ex" + Ex,
                            JOptionPane.ERROR_MESSAGE);
                }
            }

            if (e.getActionCommand().compareTo("reset") == 0) {
                //System.out.println("reset");
            }
            if (e.getActionCommand().compareTo("unselect") == 0) {
                ListSelectionModel listModel = table.getSelectionModel();
                listModel.removeSelectionInterval(listModel.getMinSelectionIndex(), listModel.getMaxSelectionIndex());
                selectedArray();
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.err.println(ex);
        }
    }//menu

    private void copy() throws HeadlessException {
        StringBuilder sbf = new StringBuilder();
        // Check to ensure we have selected only a contiguous block of
        // cells
        int numcols = table.getSelectedColumnCount();
        int numrows = table.getSelectedRowCount();
        int[] rowsselected = table.getSelectedRows();
        int[] colsselected = table.getSelectedColumns();
        if (!((numrows - 1 == rowsselected[rowsselected.length - 1] - rowsselected[0]
                && numrows == rowsselected.length)
                && (numcols - 1 == colsselected[colsselected.length - 1] - colsselected[0]
                && numcols == colsselected.length))) {
            JOptionPane.showMessageDialog(null, "Invalid Copy Selection",
                    "Invalid Copy Selection",
                    JOptionPane.ERROR_MESSAGE);
        }
        for (int i = 0; i < numrows; i++) {
            for (int j = 0; j < numcols; j++) {
                sbf.append(table.getValueAt(rowsselected[i], colsselected[j]));
                if (j < numcols - 1) {
                    sbf.append("\t");
                }
            }
            sbf.append("\n");
        }
        stsel = new StringSelection(sbf.toString());
        system = Toolkit.getDefaultToolkit().getSystemClipboard();
        system.setContents(stsel, stsel);
    } //copy

    private void print() throws Exception {
        Printable printable;
        MessageFormat headerFormat = null;
        MessageFormat footerFormat = new MessageFormat("- {0} -");

        int modelColumnCount = table.getModel().getColumnCount();
        int tableColumnCount = table.getColumnCount();
        int[] rowsSelected = table.getSelectedRows();
        ArrayList colsSelected = new ArrayList();
        int[] cSelected = table.getSelectedColumns();
        for (int i = 0; i < cSelected.length; i++) {
            colsSelected.add(i, (Integer) cSelected[i]);
        }
        if (modelColumnCount > tableColumnCount) {
            int hiddenColumnCount = modelColumnCount - tableColumnCount;
            for (int i = 0; i < hiddenColumnCount; i++) {
                colsSelected.add(tableColumnCount + i);
            }
        }

        DefaultTableModel tempModel = new DefaultTableModel();
        JTable tempTable;
        if (rowsSelected.length > 0 & rowsSelected.length <= table.getRowCount()) {
            Vector columnNames = new Vector();
            int index = 0;
            for (; index < table.getColumnCount(); index++) {
                columnNames.add(index, table.getColumnName(index));
            }

            for (; index < modelColumnCount; index++) {
                columnNames.add((index), table.getModel().getColumnName(index));
            }
            Vector data = new Vector();
            Vector selectedCol = new Vector();
            for (int i = 0; i < colsSelected.size(); i++) {
                selectedCol.add(columnNames.get((Integer) colsSelected.get(i)));
            }
            tempModel.setDataVector(data, selectedCol);

            for (int i = 0; i < rowsSelected.length; i++) {
                Vector v = new Vector();
                for (int j = 0; j < colsSelected.size(); j++) {
                    int col = (Integer) colsSelected.get(j);
                    //System.out.println(col);
                    if (col < tableColumnCount) {
                        v.add(table.getModel().getValueAt(table.convertRowIndexToModel(rowsSelected[i]), table.convertColumnIndexToModel(col)));
                    } else {
                        v.add(table.getModel().getValueAt(table.convertRowIndexToModel(rowsSelected[i]), col));
                    }
                }
                tempModel.addRow(v);
            }


            tempTable = new JTable(tempModel);
            tempTable.setSize(100, 100);
            tempTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            tempTable.setGridColor(Color.BLUE);

            int[] widthColumn = {80, 90, 50, 50, 35, 35, 60, 420, 40, 150, 35, 40, 20, 100, 40, 500, 500, 500, 500};

            Vector origColumnNames = new Vector();
            for (int i = 0; i < model.getColumnCount(); i++) {
                origColumnNames.add(i, model.getColumnName(i));
            }


            for (int i = 0; i < tempTable.getColumnCount(); i++) {
                TableColumn column = tempTable.getColumnModel().getColumn(i);
                boolean check = false;
                for (int j = 0; j < origColumnNames.size(); j++) {
                    if (tempTable.getColumnName(i).equals(model.getColumnName(j))) {
                        column.setPreferredWidth(widthColumn[j]);
                        check = true;
                        //System.out.println(tempTable.getColumnName(i) + " :" + widthColumn[colsSelected[i]]);
                        break;
                    }
                }
                if (!check) {
                    column.setPreferredWidth(50);
                }
            }


            tempTable.removeColumn(tempTable.getColumn("bground"));
            tempTable.removeColumn(tempTable.getColumn("fground"));
            tempTable.removeColumn(tempTable.getColumn("tooltipcolumn"));
            tempTable.removeColumn(tempTable.getColumn("tooltiptext"));
            MyTableCellRender tableCellRender = new MyTableCellRender();


            tempTable.setDefaultRenderer(Object.class, tableCellRender);
            tempTable.setShowGrid(true);

            JScrollPane scrollPane = new JScrollPane(tempTable);
            scrollPane.setPreferredSize(new Dimension(400, 83));

            JFrame frame = new JFrame("");
            frame.getContentPane().add(scrollPane);
            frame.pack();
            printable = tempTable.getPrintable(javax.swing.JTable.PrintMode.FIT_WIDTH, headerFormat, footerFormat);
            //frame.setVisible(true);
            frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            frame = null;
            scrollPane = null;
            tempTable = null;
            tempModel = null;
        } else {
            printable = table.getPrintable(javax.swing.JTable.PrintMode.FIT_WIDTH, headerFormat, footerFormat);
        }

        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(printable);
        HashPrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();
        attr.add(OrientationRequested.LANDSCAPE);

        attr.add(new MediaPrintableArea(10.0f, 10.0f, 190.0f, 277.0f, MediaPrintableArea.MM));
        if (job.printDialog(attr)) {
            job.print(attr);
        }
    }////Prepare table for print

    private void excel() throws Exception {
        int modelColumnCount = table.getModel().getColumnCount();
        int tableColumnCount = table.getColumnCount();
        int[] rowsSelected = table.getSelectedRows();
        ArrayList colsSelected = new ArrayList();
        int[] cSelected = table.getSelectedColumns();
        for (int i = 0; i < cSelected.length; i++) {
            colsSelected.add(i, (Integer) cSelected[i]);
        }
        if (modelColumnCount > tableColumnCount) {
            int hiddenColumnCount = modelColumnCount - tableColumnCount;
            for (int i = 0; i < hiddenColumnCount; i++) {
                colsSelected.add(tableColumnCount + i);
            }
        }

        DefaultTableModel tempModel = new DefaultTableModel();
        //System.out.println(sorter.getViewRowCount());
        JTable tempTable;

        if (rowsSelected.length > 0 & rowsSelected.length <= table.getRowCount()) {
        } else {
            table.selectAll();
            rowsSelected = table.getSelectedRows();
            cSelected = table.getSelectedColumns();
            for (int i = 0; i < cSelected.length; i++) {
                colsSelected.add(i, (Integer) cSelected[i]);
            }
        }
        Vector columnNames = new Vector();
        int index = 0;
        for (; index < table.getColumnCount(); index++) {
            columnNames.add(index, table.getColumnName(index));
        }

        for (; index < modelColumnCount; index++) {
            columnNames.add((index), table.getModel().getColumnName(index));
        }
        Vector data = new Vector();
        Vector selectedCol = new Vector();
        for (int i = 0; i < colsSelected.size(); i++) {
            selectedCol.add(columnNames.get((Integer) colsSelected.get(i)));
        }

        tempModel.setDataVector(data, selectedCol);
        for (int i = 0; i < rowsSelected.length; i++) {
            Vector v = new Vector();
            for (int j = 0; j < colsSelected.size(); j++) {
                int col = (Integer) colsSelected.get(j);
                if (col < tableColumnCount) {
                    //System.out.println((rowsSelected[i])+" "+ col);
                    v.add(table.getModel().getValueAt(table.convertRowIndexToModel(rowsSelected[i]), table.convertColumnIndexToModel(col)));
                } else {
                    v.add(table.getModel().getValueAt(table.convertRowIndexToModel(rowsSelected[i]), col));
                }
            }

            tempModel.addRow(v);
            //tempModel.addRow((Vector) model.getDataVector().elementAt(rowsSelected[i]));
        }
        Vector origColumnNames = new Vector();
        for (int i = 0; i < model.getColumnCount(); i++) {
            origColumnNames.add(i, model.getColumnName(i));
        }
        tempTable = new JTable(tempModel);
        MyTableCellRender tableCellRender = new MyTableCellRender();

        tempTable.setDefaultRenderer(Object.class, tableCellRender);
        tempTable.setSize(100, 100);
        tempTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //tempTable.setTableHeader(table.getTableHeader());
        //JTableHeader tempTableHeader = tempTable.getTableHeader();
        int[] widthColumn = {80, 90, 50, 50, 35, 35, 60, 420, 40, 150, 35, 40, 20, 100, 40, 500, 500, 500, 500};
        for (int i = 0; i < tempTable.getColumnCount(); i++) {
            TableColumn column = tempTable.getColumnModel().getColumn(i);
            boolean check = false;
            for (int j = 0; j < origColumnNames.size(); j++) {
                if (tempTable.getColumnName(i).equals(model.getColumnName(j))) {
                    column.setPreferredWidth(widthColumn[(Integer) colsSelected.get(i)]);
                    check = true;
                    //System.out.println(tempTable.getColumnName(i) + " :" + widthColumn[colsSelected[i]]);
                    break;
                }
            }
            if (!check) {
                column.setPreferredWidth(50);
            }
        }
        String tmpPath = userDir
                + System.getProperty("file.separator") + "export";
        //File f = new File(tmpPath);
        //f.mkdirs();
        String excelFile = tmpPath + System.getProperty("file.separator");

        tempTable.removeColumn(tempTable.getColumn("bground"));
        tempTable.removeColumn(tempTable.getColumn("fground"));
        tempTable.removeColumn(tempTable.getColumn("tooltipcolumn"));
        tempTable.removeColumn(tempTable.getColumn("tooltiptext"));


        ExportExcel excel = new ExportExcel(excelFile, tempTable);
        thread3 = new Thread(excel);
        //thread3.setName("exportExcelThread");
        thread3.start();

        //ListSelectionModel listModel = table.getSelectionModel();
        //listModel.removeSelectionInterval(listModel.getMinSelectionIndex(), listModel.getMaxSelectionIndex());
        tempTable = null;
        tempModel = null;
    }//Prepare table for excel

    private DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir) {
        String curPath = dir.getPath();
        String curName = dir.getName();

        DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(curName);
        if (curTop != null) { // should only be null at root
            curTop.add(curDir);
        }
        Vector ol = new Vector();
        String[] tmp = dir.list();
        for (int i = 0; i < tmp.length; i++) {
            ol.addElement(tmp[i]);
        }
        Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
        File f;
        Vector files = new Vector();
        // Make two passes, one for Dirs and one for Files. This is #1.
        for (int i = 0; i < ol.size(); i++) {
            String thisObject = (String) ol.elementAt(i);
            String newPath;
            if (curPath.equals(".")) {
                newPath = thisObject;
            } else {
                newPath = curPath + File.separator + thisObject;
            }
            if ((f = new File(newPath)).isDirectory()) {
                addNodes(curDir, f);
            } else {
                files.addElement(thisObject);
            }
        }
        // Pass two: for files.
        for (int fnum = 0; fnum < files.size(); fnum++) {
            curDir.add(new DefaultMutableTreeNode(files.elementAt(fnum)));
        }
        ol = null;
        files = null;
        return curDir;
    }//Nodes for tree

    public void setMaxSize() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        setPreferredSize(new Dimension(800, 600));
        int frameWidth = screenSize.width;
        int frameHeight = screenSize.height - 30;
        setSize(new Dimension(frameWidth, frameHeight));
        setMinimumSize(new Dimension(800, 600));
    } //set form to max size

    public void setModel() {
        //table.setVisible(false);
        Vector dataVector = LoadFile.getV();
        Vector col = new Vector(model.getColumnCount());
        if (dataVector != null) {
            sorter.setRowFilter(RowFilter.regexFilter(""));
            sorter.setSortKeys(null);
            for (int i = 0; i < model.getColumnCount(); i++) {
                col.add(i, model.getColumnName(i));
            }
            //System.out.println(dataVector.size());
            model.setDataVector(dataVector, col);
            int[] widthColumn = {80, 90, 50, 50, 35, 35, 60, 420, 40, 150, 35, 40, 20, 100, 40, 500, 500, 500, 500};
            for (int i = 0; i < table.getColumnCount(); i++) {
                TableColumn column = table.getColumnModel().getColumn(i);
                column.setPreferredWidth(widthColumn[i]);
            }
        } else {
            for (int i = 0; i < model.getColumnCount(); i++) {
                col.add(i, model.getColumnName(i));
            }
            model.setDataVector(dataVector, col);
        }
        table.removeColumn(table.getColumn("bground"));
        table.removeColumn(table.getColumn("fground"));
        table.removeColumn(table.getColumn("tooltipcolumn"));
        table.removeColumn(table.getColumn("tooltiptext"));
        paneTable.getVerticalScrollBar().setValue(0);
        //paneTable.getViewport().setViewPosition(new Point(0,0));
        dataVector = null;
        col = null;
    }// load model values

    public void clearModel() {
        LoadFile.setV(null);
        nextButton.setEnabled(false);
        model = new DefaultTableModel();
        table.removeAll();
        this.dispose();
    }//clear model

    private void popupMenu() {

        String[] menus = new String[]{"copy", "print", "export to excel", "select all", "unselect"};
        boolean[] separators = new boolean[]{true, false, true, false, false};
        for (int i = 0; i < menus.length; i++) {
            JMenuItem menuItem = new JMenuItem(menus[i]);
            menuItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    menuItemActionEvent(e);
                }
            });
            popupMenu.add(menuItem);
            if (separators[i]) {
                popupMenu.addSeparator();
            }
        }
    }//Set POPUP menu in the jtable

    public void updateTree() {
        rootNode.removeAllChildren();
        Vector children = new Vector();
        String[] childrenString = dir.list();
        for (int i = 0; i < childrenString.length; i++) {
            children.add(childrenString[i]);
            Collections.sort(children, String.CASE_INSENSITIVE_ORDER);
        }
        for (int i = 0; i < children.size(); i++) {
            File child = new File(filePath + children.elementAt(i) + System.getProperty("file.separator"));
            //System.out.println(child);
            if (child.isDirectory()) {
                DefaultMutableTreeNode newNode = addNodes(null, child);
                treeModel.insertNodeInto(newNode, rootNode, rootNode.getChildCount());
            }
        }
        treeModel.reload();
    }//reload tree menu

    private void selectedArray() {
        int viewRow = table.getSelectedRow();
        int viewColumn = table.getSelectedColumn();
        if (viewRow < 0 || viewColumn < 0) {
            //Selection got filtered away.
            status("");
        } else {
            int modelRow = table.convertRowIndexToModel(viewRow);
            int modelColumn = table.convertColumnIndexToModel(viewColumn);
            int rowCount = table.getSelectedRowCount();
            int columnCount = table.getSelectedColumnCount();
            status(
                    String.format("Selected Row : %d. "
                    + "Selected Column : %d."
                    + "Selected Row count : %d. "
                    + "Selected Column count : %d. ",
                    modelRow, modelColumn, rowCount, columnCount));
        }
    }//Write selected array of table to statustext 

    private void status(String text) {
        statusText.setText(text);
        statusText.update(statusText.getGraphics());
    }//Write text to status label with GUI update

    @Override
    public void dispose() {
        setState(javax.swing.JFrame.ICONIFIED);
        super.dispose();
    }//Override dispose() method of frame. We set frame minimise before dispose it. I use it for better memory usage. 

    public class MyKeyListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent keyEvent) {
            //char i = ke.getKeyChar();
            int i = keyEvent.getKeyCode();
            if (i == 10) {
                setFilterButton.doClick();
            }
        }
    }//Keylistener for setfilter.We use enter Key. Somebody can press enter instead of filter button

    protected void reinit(String home) {
        userDir = home;
        initComponents();
    } //Reinitializating form

    class PrimeRun implements Runnable {

        String[] fileName;
        String csvPath;
        String selectedPath;
        String tmpPath;
        String filter;

        PrimeRun(String[] fileName, String csvPath, String selectedPath, String tmpPath, String filter) {
            this.fileName = fileName;
            this.csvPath = csvPath;
            this.selectedPath = selectedPath;
            this.tmpPath = tmpPath;
            this.filter = filter;
        }

        @Override
        public void run() {
            //System.out.println("thread1 run");
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            CursorThread c = new CursorThread();
            thread2 = new Thread(c);
            thread2.start();
            try {
                table.clearSelection();
                if (fileName[fileName.length - 1].equals("csv")) {
                    csvPath = selectedPath;
                } else if (fileName[fileName.length - 1].equals("zip")) {
                    //UnZip uZ = new UnZip();
                    status("unzip\t" + selectedPath + " \t--->\t " + tmpPath);
                    jProgressBar1.setVisible(true);
                    UnZip.unZipIt(selectedPath, tmpPath);
                    //jProgressBar1.setVisible(false);
                    csvPath = tmpPath
                            + System.getProperty("file.separator")
                            + fileName[0] + ".csv";
                    pageNumber = 1;
                }
                prevButton.setEnabled(false);
                statusText.setText("open :" + csvPath + " --page " + pageNumber);
                LoadFile.load(csvPath, pageNumber, filter.toLowerCase());
                jProgressBar1.setVisible(false);
                status(csvPath + " --page " + pageNumber);
                if (LoadFile.isMore()) {
                    nextButton.setEnabled(true);
                } else {
                    nextButton.setEnabled(false);
                }
                thread2.interrupt();
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                //thread.interrupt();
                //setState(javax.swing.JFrame.ICONIFIED);
                //setState(javax.swing.JFrame.NORMAL);
                if (pageNumber > 1) {
                    prevButton.setEnabled(true);
                }
                if (LoadFile.isMore()) {
                    nextButton.setEnabled(true);
                } else {
                    nextButton.setEnabled(false);
                }
                if (filter.equals("")) {
                    filterText.setBackground(Color.white);
                } else {
                    filterText.setBackground(Color.orange);
                }
            } catch (Exception iex) {
            }
        }
    }//Import data to the table working in a thread.

    class CursorThread implements Runnable {

        CursorThread() {
        }

        @Override
        @SuppressWarnings("SleepWhileHoldingLock")
        public void run() {
            //System.out.println("thread2 run");
            try {
                long time = 0;
                while (true) {
                    //System.out.println(getCursor().getName());
                 /*   if (getCursor().getType() == Cursor.N_RESIZE_CURSOR) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR));
                    } else if (getCursor().getType() == Cursor.SW_RESIZE_CURSOR) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.W_RESIZE_CURSOR));
                    } else if (getCursor().getType() == Cursor.W_RESIZE_CURSOR) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR));
                    } else {
                    setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
                    }*/
                    Thread.sleep(200);
                    /*System.out.println((int) Math.round(LoadFile.getJob()) + "% "
                    + (int) Math.round(UnZip.getJob()) + "% ");
                     */
                    if (((int) Math.round(UnZip.getJob())) < jProgressBar1.getMaximum()) {
                        //System.out.println((int)Math.round(UnZip.getJob())+"%");
                        jProgressBar1.setValue((int) Math.round(UnZip.getJob()));
                        jProgressBar1.setString(Math.round(UnZip.getJob()) + "%");
                        jProgressBar1.setStringPainted(true);
                        jProgressBar1.update(jProgressBar1.getGraphics());
                    } else if (((int) Math.round(LoadFile.getJob())) > jProgressBar1.getMinimum()) {
                        if (!jProgressBar1.isVisible()) {
                            jProgressBar1.setVisible(true);
                            jProgressBar1.update(jProgressBar1.getGraphics());
                            //LFrame.super.update(LFrame.super.getGraphics());
                        }
                        int persent = (int) Math.round(LoadFile.getJob());
                        jProgressBar1.setValue(persent);
                        jProgressBar1.setString(persent + "%");
                        jProgressBar1.setStringPainted(true);
                        jProgressBar1.update(jProgressBar1.getGraphics());
                        //statusText.update(statusText.getGraphics());
                        //System.out.println("persent= " + persent + "%");

                    } else {
                        if (time == 0) {
                            time = System.currentTimeMillis();
                            //status(statusText.getText()+"\tclose()");
                        }
                        if (!jProgressBar1.isVisible()) {
                            jProgressBar1.setVisible(true);
                        }
                        float elapsedTime = (System.currentTimeMillis() - time) * 2;
                        float workTime = UnZip.getWorkTime();
                        int persent = 0;
                        persent = Math.round(elapsedTime / workTime * 100);
                        if (persent > 100) {
                            persent = 100;
                        }
                        //System.out.println(persent);
                        jProgressBar1.setValue(persent);
                        jProgressBar1.setString(persent + "%");
                        jProgressBar1.setStringPainted(true);
                        jProgressBar1.update(jProgressBar1.getGraphics());
                    }
                }
            } catch (Exception iex) {
            }
        }
    }//While unzip and import working we use progressbar witch show the progress statement.

    class ExportExcel implements Runnable {

        String userDir;
        JTable mytable;
        /**
         * 
         * @param userDir
         * @param table
         */
        ExportExcel(String userDir, JTable table) {
            this.userDir = userDir;
            this.mytable = table;
        }

        @Override
        public void run() {
            if (!excelThreadisRunning) {
                excelThreadisRunning = true;
                ExcelWriterWithApachePOI evii = new ExcelWriterWithApachePOI(userDir, mytable);
                excelThreadisRunning = false;
                evii=null;
                System.gc();
            } else {
                JOptionPane.showMessageDialog(null, "Már fut egy exportálás!\nProbáld újra késöbb!!!",
                        "Az exportálás nem sikerült",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//Separated thread for export excel. The export need work in a thread becouse the time of the export can be longer times.
}
