/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * setupFrame.java
 *
 * Created on 2011.06.15., 20:29:03
 */
package setup;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author gabesz
 */
public class SetupFrame extends javax.swing.JFrame {

    ColorXMLFile cxml;
    ColorXMLCondFile cxmlCond;
    String path, pathDir, condPath;
    PopupWindow popupWindow = null;
    PopupWindowCond popupWindowCond = null;
    Vector dataVector = null;
    Vector dataVectorCond = null;

    /** Creates new form setupFrame */
    public SetupFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelSzinezés = new javax.swing.JPanel();
        jScrollPaneSzinezés = new javax.swing.JScrollPane();
        modelInit();
        tableSzinezés = new javax.swing.JTable(model){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }};
            jButtonNew = new javax.swing.JButton();
            jButtonSave = new javax.swing.JButton();
            jButtonCancel = new javax.swing.JButton();
            jPanel1 = new javax.swing.JPanel();
            jScrollPaneCond = new javax.swing.JScrollPane();
            modelInitCond();
            jTableCond = new javax.swing.JTable(modelCond){
                public boolean isCellEditable(int rowIndex, int colIndex) {
                    return false;   //Disallow the editing of any cell
                }};
                jButtonNew2 = new javax.swing.JButton();
                jButtonSave2 = new javax.swing.JButton();
                jButtonCancel2 = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setIconImage(Toolkit.getDefaultToolkit().getImage(SetupFrame.class.getResource("images/log-icon16.png")));
                setResizable(false);
                addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent evt) {
                        windowClose(evt);
                    }
                });

                Font font=new java.awt.Font("Tahoma", 0, 18);
                Color background=new java.awt.Color(204, 204, 204);
                tableSzinezés.setBackground(background);
                tableSzinezés.setFont(font);
                Color gridColor=new java.awt.Color(36, 36, 176);
                tableSzinezés.setGridColor(gridColor);
                tableSzinezés.setRowHeight(24);
                tableSzinezés.getTableHeader().setReorderingAllowed(false);
                tableSzinezés.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        tableSzinezésMouseClicked(evt);
                    }
                });
                jScrollPaneSzinezés.setViewportView(tableSzinezés);
                JTableHeader header = tableSzinezés.getTableHeader();
                header.setFont(font);
                header.setBackground(Color.GRAY);
                header.setForeground(Color.black);
                prepareModel();
                setModel();

                jButtonNew.setText("New");
                jButtonNew.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonNewActionPerformed(evt);
                    }
                });

                jButtonSave.setText("Save");
                jButtonSave.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonSaveActionPerformed(evt);
                    }
                });

                jButtonCancel.setText("Cancel");
                jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonCancelActionPerformed(evt);
                    }
                });

                javax.swing.GroupLayout jPanelSzinezésLayout = new javax.swing.GroupLayout(jPanelSzinezés);
                jPanelSzinezés.setLayout(jPanelSzinezésLayout);
                jPanelSzinezésLayout.setHorizontalGroup(
                    jPanelSzinezésLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSzinezésLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)
                        .addComponent(jButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCancel)
                        .addContainerGap())
                    .addGroup(jPanelSzinezésLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPaneSzinezés, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
                );
                jPanelSzinezésLayout.setVerticalGroup(
                    jPanelSzinezésLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSzinezésLayout.createSequentialGroup()
                        .addContainerGap(199, Short.MAX_VALUE)
                        .addGroup(jPanelSzinezésLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonNew)
                            .addComponent(jButtonSave)
                            .addComponent(jButtonCancel))
                        .addGap(31, 31, 31))
                    .addGroup(jPanelSzinezésLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelSzinezésLayout.createSequentialGroup()
                            .addComponent(jScrollPaneSzinezés, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addGap(93, 93, 93)))
                );

                jTabbedPane1.addTab("Szinezés", jPanelSzinezés);

                jTableCond.setBackground(background);
                jTableCond.setFont(font);
                jTableCond.setGridColor(gridColor);
                jTableCond.setRowHeight(24);
                jTableCond.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jTableCondMouseClicked(evt);
                    }
                });
                jTableCond.getTableHeader().setReorderingAllowed(false);
                jScrollPaneCond.setViewportView(jTableCond);
                JTableHeader headerCond = jTableCond.getTableHeader();
                headerCond.setFont(font);
                headerCond.setBackground(Color.GRAY);
                headerCond.setForeground(Color.black);
                prepareCondModel();
                setCondModel();

                jButtonNew2.setText("New");
                jButtonNew2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonNew2ActionPerformed(evt);
                    }
                });

                jButtonSave2.setText("Save");
                jButtonSave2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonSave2ActionPerformed(evt);
                    }
                });

                jButtonCancel2.setText("Cancel");
                jButtonCancel2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonCancel2ActionPerformed(evt);
                    }
                });

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCond, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonNew2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, Short.MAX_VALUE)
                        .addComponent(jButtonSave2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancel2)
                        .addContainerGap())
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPaneCond, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonNew2)
                            .addComponent(jButtonCancel2)
                            .addComponent(jButtonSave2))
                        .addGap(33, 33, 33))
                );

                jTabbedPane1.addTab("Feltételes színezés", jPanel1);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void tableSzinezésMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSzinezésMouseClicked
        int viewRow = tableSzinezés.getSelectedRow();
        if (popupWindow == null || !popupWindow.isVisible()) {
            popupWindow = new PopupWindow(dataVector, viewRow, this);
            popupWindow.setVisible(true);
            setEnabled(false);
            //table.setEnabled(false);
        }
    }//GEN-LAST:event_tableSzinezésMouseClicked

    private void windowClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClose
        if (popupWindow == null || !popupWindow.isVisible()) {
            dispose();
        } else {
        }
}//GEN-LAST:event_windowClose

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        prepareModel();
        setModel();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        WriteXMLFile xml = new WriteXMLFile(pathDir, path, dataVector);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        if (popupWindow == null || !popupWindow.isVisible()) {
            popupWindow = new PopupWindow(dataVector, dataVector.size(), this);
            popupWindow.setVisible(true);
            setEnabled(false);
            //table.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jTableCondMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCondMouseClicked
        int viewRowCond = this.jTableCond.getSelectedRow();
        if (popupWindowCond == null || !popupWindowCond.isVisible()) {
            popupWindowCond = new PopupWindowCond(dataVectorCond, viewRowCond, this);
            popupWindowCond.setVisible(true);
            setEnabled(false);
            //table.setEnabled(false);
        }
    }//GEN-LAST:event_jTableCondMouseClicked

    private void jButtonNew2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNew2ActionPerformed
        if (popupWindowCond == null || !popupWindowCond.isVisible()) {
            popupWindowCond = new PopupWindowCond(dataVectorCond, dataVectorCond.size(), this);
            popupWindowCond.setVisible(true);
            setEnabled(false);
            //table.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonNew2ActionPerformed

    private void jButtonSave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSave2ActionPerformed
        WriteXMLFileCond xmlCond = new WriteXMLFileCond(pathDir, condPath, dataVectorCond);
    }//GEN-LAST:event_jButtonSave2ActionPerformed

    private void jButtonCancel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancel2ActionPerformed
        prepareCondModel();
        setCondModel();
}//GEN-LAST:event_jButtonCancel2ActionPerformed

    public void changeVector(Vector v) {
        dataVector = v;
        setModel();
        setEnabled(true);
    }

    public void changeVectorCond(Vector v) {
        dataVectorCond = v;
        setCondModel();
        setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new SetupFrame().setVisible(true);
            }
        });
    }
//Set the frame to maximumu size

    public void setMaxSize() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        setPreferredSize(new Dimension(800, 600));
        int frameWidth = screenSize.width;
        int frameHeight = screenSize.height - 30;
        setSize(new Dimension(frameWidth, frameHeight));
        setMinimumSize(new Dimension(800, 600));
    }
    //Initalizate MODEL for table on first Tab

    private void modelInit() {
        String[] columnNames = {
            //"Num",
            "Sorszám",
            "Oszlop",
            "Szöveg",
            "háttérszín",
            "betűszín",};
        Object[][] data = {};
        model = new DefaultTableModel(data, columnNames);
        data = null;
        columnNames = null;
    }

    //Initalizate MODEL for table on secund Tab
    private void modelInitCond() {
        String[] columnNamesCond = {
            //"Num",
            "Sorszám",
            "Oszlop",
            "Szöveg",
            "Feltétel oszlop",
            "Feltétel",
            "Érték",
            "háttérszín if",
            "betűszín if",
            "háttérszín else",
            "betűszín else",};
        Object[][] dataCond = {};
        modelCond = new DefaultTableModel(dataCond, columnNamesCond);
        dataCond = null;
        columnNamesCond = null;
    }

    public void prepareModel() {
        String separator = System.getProperty("file.separator");
        pathDir = System.getProperty("user.dir") + separator + "logreaderxml";
        path = pathDir + separator + "colors.xml";
        cxml = new ColorXMLFile(path);
        dataVector = cxml.getObjects();
    }

    public void prepareCondModel() {
        String separator = System.getProperty("file.separator");
        pathDir = System.getProperty("user.dir") + separator + "logreaderxml";
        condPath = pathDir + separator + "conditionalcolor.xml";
        cxmlCond = new ColorXMLCondFile(condPath);
        dataVectorCond = cxmlCond.getObjects();
    }

    public void setModel() {
        //table.setVisible(false);

        Vector col = new Vector(model.getColumnCount());
        if (dataVector != null) {
            for (int i = 0; i < model.getColumnCount(); i++) {
                col.add(i, model.getColumnName(i));
            }
            //System.out.println(dataVector.size());
            model.setDataVector(dataVector, col);
            //int[] widthColumn = {80, 90, 50, 50, 35, 35, 60, 420, 40, 150, 35, 40, 20, 100, 40};
            for (int i = 0; i < tableSzinezés.getColumnCount(); i++) {
                TableColumn column = tableSzinezés.getColumnModel().getColumn(i);
                //column.setPreferredWidth(widthColumn[i]);
            }
        } else {
            for (int i = 0; i < model.getColumnCount(); i++) {
                col.add(i, model.getColumnName(i));
            }
            model.setDataVector(dataVector, col);
        }
        jScrollPaneSzinezés.getVerticalScrollBar().setValue(0);
        //paneTable.getViewport().setViewPosition(new Point(0,0));
        //dataVector = null;
        col = null;
    }

    public void setCondModel() {
        //table.setVisible(false);

        Vector colCond = new Vector(modelCond.getColumnCount());
        if (dataVectorCond != null) {
            for (int i = 0; i < modelCond.getColumnCount(); i++) {
                colCond.add(i, modelCond.getColumnName(i));
            }
            modelCond.setDataVector(dataVectorCond, colCond);
        } else {
            for (int i = 0; i < modelCond.getColumnCount(); i++) {
                colCond.add(i, modelCond.getColumnName(i));
            }
            modelCond.setDataVector(dataVectorCond, colCond);
        }
        jScrollPaneCond.getVerticalScrollBar().setValue(0);
        //paneTable.getViewport().setViewPosition(new Point(0,0));
        //dataVector = null;
        colCond = null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCancel2;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonNew2;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSave2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelSzinezés;
    private javax.swing.JScrollPane jScrollPaneCond;
    private javax.swing.JScrollPane jScrollPaneSzinezés;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableCond;
    private DefaultTableModel modelCond;
    private DefaultTableModel model;
    private javax.swing.JTable tableSzinezés;
    // End of variables declaration//GEN-END:variables
}
